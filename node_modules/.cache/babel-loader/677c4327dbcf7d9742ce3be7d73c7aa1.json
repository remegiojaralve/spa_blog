{"remainingRequest":"/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/babel-loader/lib/index.js!/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/eslint-loader/index.js??ref--13-0!/Users/rj/Trainings/GoalSPA/spa_blog/src/store/modules/post.js","dependencies":[{"path":"/Users/rj/Trainings/GoalSPA/spa_blog/src/store/modules/post.js","mtime":1599120349018},{"path":"/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL3JqL1RyYWluaW5ncy9Hb2FsU1BBL3NwYV9ibG9nL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKdmFyIHN0YXRlID0gewogIHBvc3RMaXN0OiBbXSwKICBsYXRlc3RQb3N0czogW10sCiAgc2luZ2xlUG9zdDoge30sCiAgdG90YWxQb3N0OiAwCn07CnZhciBnZXR0ZXJzID0gewogIGFsbFBvc3RzOiBmdW5jdGlvbiBhbGxQb3N0cyhzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnBvc3RMaXN0OwogIH0sCiAgYWxsTGF0ZXN0UG9zdHM6IGZ1bmN0aW9uIGFsbExhdGVzdFBvc3RzKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUubGF0ZXN0UG9zdHM7CiAgfSwKICBwb3N0RGV0YWlsOiBmdW5jdGlvbiBwb3N0RGV0YWlsKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUuc2luZ2xlUG9zdDsKICB9LAogIGdldFRvdGFsUG9zdDogZnVuY3Rpb24gZ2V0VG90YWxQb3N0KHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUudG90YWxQb3N0OwogIH0KfTsKdmFyIGFjdGlvbnMgPSB7CiAgZmV0Y2hUb3RhbFBvc3Q6IGZ1bmN0aW9uIGZldGNoVG90YWxQb3N0KF9yZWYpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBjb21taXQsIGRhdGEsIGNvbmZpZzsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICAgICAgICAgIGRhdGEgPSBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICBxdWVyeTogJ3tcbiAgcG9zdHN7XG4gICAgaWQsIHRpdGxlLCBjb250ZW50LCBjcmVhdGVkQXQsaW1hZ2UgLCBjb21tZW50cyB7XG4gICAgICBpZFxuICAgIH1cbiAgfVxufScsCiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHt9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgY29uZmlnID0gewogICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgICAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjQwMDAvJywKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBheGlvcyhjb25maWcpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBjb21taXQoJ3NldFRvdGFsUG9zdCcsIHJlc3BvbnNlLmRhdGEuZGF0YS5wb3N0cy5sZW5ndGgpOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKSgpOwogIH0sCiAgZmV0Y2hQb3N0czogZnVuY3Rpb24gZmV0Y2hQb3N0cyhfcmVmMiwgcG9zdFRvdGFsKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIGNvbW1pdCwgZGF0YSwgY29uZmlnOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgICAgICAgICAgICBkYXRhID0gSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgcXVlcnk6ICJxdWVyeXtcbiAgcG9zdHMoXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgbGltaXQ6ICIuY29uY2F0KHBvc3RUb3RhbCwgIixcbiAgICAgIG9mZnNldDogMFxuICAgIH1cbiAgKXtcbiAgICBpZCwgdGl0bGUsIGNvbnRlbnQsIGltYWdlLCBjcmVhdGVkQXQsIGNvbW1lbnRzIHtcbiAgICAgIGlkLCBjb250ZW50XG4gICAgfVxuICB9XG59IiksCiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHt9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgY29uZmlnID0gewogICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgICAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjQwMDAvJywKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MoY29uZmlnKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgY29tbWl0KCdzZXRQb3N0cycsIHJlc3BvbnNlLmRhdGEuZGF0YS5wb3N0cyk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSkoKTsKICB9LAogIGZldGNoTGF0ZXN0UG9zdHM6IGZ1bmN0aW9uIGZldGNoTGF0ZXN0UG9zdHMoX3JlZjMpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICB2YXIgY29tbWl0LCBkYXRhLCBjb25maWc7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjMuY29tbWl0OwogICAgICAgICAgICAgIGRhdGEgPSBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICBxdWVyeTogJ3F1ZXJ5e1xuICBwb3N0cyhcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBsaW1pdDogMyxcbiAgICAgIG9mZnNldDogMFxuICAgIH1cbiAgKXtcbiAgICBpZCwgdGl0bGUsIGNvbnRlbnQsIGltYWdlLCBjcmVhdGVkQXQsIGNvbW1lbnRzIHtcbiAgICAgIGlkLCBjb250ZW50XG4gICAgfVxuICB9XG59JywKICAgICAgICAgICAgICAgIHZhcmlhYmxlczoge30KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBjb25maWcgPSB7CiAgICAgICAgICAgICAgICBtZXRob2Q6ICdwb3N0JywKICAgICAgICAgICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6NDAwMC8nLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBheGlvcyhjb25maWcpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBjb21taXQoJ3NldExhdGVzdFBvc3RzJywgcmVzcG9uc2UuZGF0YS5kYXRhLnBvc3RzKTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzKTsKICAgIH0pKSgpOwogIH0sCiAgZmV0Y2hTaW5nbGVQb3N0OiBmdW5jdGlvbiBmZXRjaFNpbmdsZVBvc3QoX3JlZjQsIGlkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgdmFyIGNvbW1pdCwgZGF0YSwgY29uZmlnOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY0LmNvbW1pdDsKICAgICAgICAgICAgICBkYXRhID0gSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgcXVlcnk6ICJxdWVyeXtcbiAgcG9zdChcbiAgIGlkOiAiLmNvbmNhdChpZCwgIlxuICApe1xuICAgIGlkLCB0aXRsZSwgY29udGVudCwgaW1hZ2UsIGNyZWF0ZWRBdCwgY29tbWVudHMge1xuICAgICAgaWQsIGNvbnRlbnQsIGNyZWF0ZWRBdFxuICAgIH1cbiAgfVxufSIpLAogICAgICAgICAgICAgICAgdmFyaWFibGVzOiB7fQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGNvbmZpZyA9IHsKICAgICAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLAogICAgICAgICAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo0MDAwLycsCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zKGNvbmZpZykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIHZhciBwb3N0RGV0YWlsID0gcmVzcG9uc2UuZGF0YS5kYXRhLnBvc3Q7CiAgICAgICAgICAgICAgICBjb21taXQoJ3NpbmdsZVBvc3QnLCBwb3N0RGV0YWlsKTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWU0KTsKICAgIH0pKSgpOwogIH0sCiAgYWRkUG9zdDogZnVuY3Rpb24gYWRkUG9zdChjb250ZXh0LCBwYXlsb2FkKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgdmFyIGRhdGEsIGNvbmZpZzsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBkYXRhID0gSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgcXVlcnk6ICJtdXRhdGlvbiB7XG4gIGFkZFBvc3QoXG4gcG9zdDoge1xuIHRpdGxlOiBcIiIuY29uY2F0KHBheWxvYWQudGl0bGUsICJcIixcbiBjb250ZW50OiBcIiIpLmNvbmNhdChwYXlsb2FkLmNvbnRlbnQsICJcIixcbiBpbWFnZTogXCIiKS5jb25jYXQocGF5bG9hZC5pbWFnZSwgIlwiXG4gfVxuICkge1xuIGlkLCB0aXRsZSwgY29udGVudFxuICB9XG59IiksCiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHt9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgY29uZmlnID0gewogICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgICAgICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjQwMDAvJywKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgJ2F1dGhlbnRpY2F0ZSc6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhdXRoZW50aWNhdGUnKS52YWx1ZSwKICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBxdW90ZS1wcm9wcwogICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgYXhpb3MoY29uZmlnKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuZGF0YSkpOwogICAgICAgICAgICAgICAgY29udGV4dC5jb21taXQoJ25ld1Bvc3QnLCByZXNwb25zZS5kYXRhLnBheWxvYWQpOwogICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTUpOwogICAgfSkpKCk7CiAgfQp9Owp2YXIgbXV0YXRpb25zID0gewogIHNldFRvdGFsUG9zdDogZnVuY3Rpb24gc2V0VG90YWxQb3N0KHN0YXRlLCB0b3RhbFBvc3QpIHsKICAgIHJldHVybiBzdGF0ZS50b3RhbFBvc3QgPSB0b3RhbFBvc3Q7CiAgfSwKICBzZXRQb3N0czogZnVuY3Rpb24gc2V0UG9zdHMoc3RhdGUsIHBvc3RMaXN0KSB7CiAgICByZXR1cm4gc3RhdGUucG9zdExpc3QgPSBwb3N0TGlzdDsKICB9LAogIHNldExhdGVzdFBvc3RzOiBmdW5jdGlvbiBzZXRMYXRlc3RQb3N0cyhzdGF0ZSwgbGF0ZXN0UG9zdHMpIHsKICAgIHJldHVybiBzdGF0ZS5sYXRlc3RQb3N0cyA9IGxhdGVzdFBvc3RzOwogIH0sCiAgc2luZ2xlUG9zdDogZnVuY3Rpb24gc2luZ2xlUG9zdChzdGF0ZSwgX3NpbmdsZVBvc3QpIHsKICAgIHJldHVybiBzdGF0ZS5zaW5nbGVQb3N0ID0gX3NpbmdsZVBvc3Q7CiAgfSwKICBzZXRMb2FkTW9yZVBvc3RzOiBmdW5jdGlvbiBzZXRMb2FkTW9yZVBvc3RzKHN0YXRlLCBsb2FkTW9yZVBvc3RzKSB7CiAgICByZXR1cm4gc3RhdGUubG9hZE1vcmVQb3N0cyA9IGxvYWRNb3JlUG9zdHM7CiAgfSwKICBuZXdQb3N0OiBmdW5jdGlvbiBuZXdQb3N0KHN0YXRlLCBwYXlsb2FkKSB7CiAgICB2YXIgbmV3UG9zdCA9IHsKICAgICAgdGl0bGU6IHBheWxvYWQudGl0bGUsCiAgICAgIGNvbnRlbnQ6IHBheWxvYWQuY29udGVudCwKICAgICAgaW1hZ2U6IHBheWxvYWQuaW1hZ2UKICAgIH07CiAgICBzdGF0ZS5wb3N0TGlzdC5wdXNoKG5ld1Bvc3QpOwogICAgY29uc29sZS5sb2coc3RhdGUucG9zdExpc3QubGVuZ3RoKTsKICB9Cn07CmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogc3RhdGUsCiAgZ2V0dGVyczogZ2V0dGVycywKICBhY3Rpb25zOiBhY3Rpb25zLAogIG11dGF0aW9uczogbXV0YXRpb25zCn07"},{"version":3,"sources":["/Users/rj/Trainings/GoalSPA/spa_blog/src/store/modules/post.js"],"names":["axios","state","postList","latestPosts","singlePost","totalPost","getters","allPosts","allLatestPosts","postDetail","getTotalPost","actions","fetchTotalPost","commit","data","JSON","stringify","query","variables","config","method","url","headers","then","response","posts","length","fetchPosts","postTotal","fetchLatestPosts","fetchSinglePost","id","post","addPost","context","payload","title","content","image","localStorage","getItem","value","console","log","catch","error","mutations","setTotalPost","setPosts","setLatestPosts","setLoadMorePosts","loadMorePosts","newPost","push"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nconst state = {\n  postList: [],\n  latestPosts: [],\n  singlePost: {},\n  totalPost: 0\n}\n\nconst getters = {\n  allPosts: (state) => state.postList,\n  allLatestPosts: (state) => state.latestPosts,\n  postDetail: (state) => state.singlePost,\n  getTotalPost: (state) => state.totalPost\n}\n\nconst actions = {\n  async fetchTotalPost ({ commit }) {\n    const data = JSON.stringify({\n      query: '{\\n  posts{\\n    id, title, content, createdAt,image , comments {\\n      id\\n    }\\n  }\\n}',\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    await axios(config)\n      .then(function (response) {\n        commit('setTotalPost', response.data.data.posts.length)\n      })\n  },\n  async fetchPosts ({ commit }, postTotal) {\n    const data = JSON.stringify({\n      query: `query{\\n  posts(\\n    pagination: {\\n      limit: ${postTotal},\\n      offset: 0\\n    }\\n  ){\\n    id, title, content, image, createdAt, comments {\\n      id, content\\n    }\\n  }\\n}`,\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    await axios(config)\n      .then(function (response) {\n        commit('setPosts', response.data.data.posts)\n      })\n  },\n  async fetchLatestPosts ({ commit }) {\n    const data = JSON.stringify({\n      query: 'query{\\n  posts(\\n    pagination: {\\n      limit: 3,\\n      offset: 0\\n    }\\n  ){\\n    id, title, content, image, createdAt, comments {\\n      id, content\\n    }\\n  }\\n}',\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    await axios(config)\n      .then(function (response) {\n        commit('setLatestPosts', response.data.data.posts)\n      })\n  },\n  async fetchSinglePost ({ commit }, id) {\n    const data = JSON.stringify({\n      query: `query{\\n  post(\\n   id: ${id}\\n  ){\\n    id, title, content, image, createdAt, comments {\\n      id, content, createdAt\\n    }\\n  }\\n}`,\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    await axios(config)\n      .then(response => {\n        const postDetail = response.data.data.post\n        commit('singlePost', postDetail)\n      })\n  },\n  async addPost (context, payload) {\n    const data = JSON.stringify({\n      query: `mutation {\\n  addPost(\\n post: {\\n title: \"${payload.title}\",\\n content: \"${payload.content}\",\\n image: \"${payload.image}\"\\n }\\n ) {\\n id, title, content\\n  }\\n}`,\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'authenticate': localStorage.getItem('authenticate').value, // eslint-disable-line quote-props\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    axios(config)\n      .then(function (response) {\n        console.log(JSON.stringify(response.data))\n        context.commit('newPost', response.data.payload)\n      })\n      .catch(function (error) {\n        console.log(error)\n      })\n  }\n}\n\nconst mutations = {\n  setTotalPost: (state, totalPost) => (state.totalPost = totalPost),\n  setPosts: (state, postList) => (state.postList = postList),\n  setLatestPosts: (state, latestPosts) => (state.latestPosts = latestPosts),\n  singlePost: (state, singlePost) => (state.singlePost = singlePost),\n  setLoadMorePosts: (state, loadMorePosts) => (state.loadMorePosts = loadMorePosts),\n  newPost: (state, payload) => {\n    const newPost = {\n      title: payload.title,\n      content: payload.content,\n      image: payload.image\n    }\n    state.postList.push(newPost)\n    console.log(state.postList.length)\n  }\n}\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n}\n"]}]}