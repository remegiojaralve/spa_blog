{"remainingRequest":"/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/babel-loader/lib/index.js!/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/eslint-loader/index.js??ref--13-0!/Users/rj/Trainings/GoalSPA/spa_blog/src/store/modules/post.js","dependencies":[{"path":"/Users/rj/Trainings/GoalSPA/spa_blog/src/store/modules/post.js","mtime":1598949054785},{"path":"/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/rj/Trainings/GoalSPA/spa_blog/src/store/modules/post.js"],"names":["axios","state","postList","latestPosts","loadMorePosts","singlePost","authKey","localStorage","getItem","getters","allPosts","allLatestPosts","postDetail","allLoadMorePosts","isLogined","actions","fetchPosts","commit","data","JSON","stringify","query","variables","config","method","url","headers","then","response","posts","fetchLatestPosts","fetchSinglePost","id","post","fetchLoadMorePosts","loginUser","payload","Promise","resolve","email","password","console","log","key","authenticate","setItem","logoutUser","context","removeItem","catch","error","registerUser","reject","addPost","res","mutations","setPosts","setLatestPosts","setLoadMorePosts","setAuthKey","logOut","newPost","body","content","title","img","unshift","length"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nconst state = {\n  postList: [],\n  latestPosts: [],\n  loadMorePosts: [],\n  singlePost: {},\n  authKey: localStorage.getItem('authenticate') || null\n}\n\nconst getters = {\n  allPosts: (state) => state.postList,\n  allLatestPosts: (state) => state.latestPosts,\n  postDetail: (state) => state.singlePost,\n  allLoadMorePosts: (state) => state.loadMorePosts,\n  isLogined: () => { return state.authKey !== null }\n}\n\nconst actions = {\n  async fetchPosts ({ commit }) {\n    const data = JSON.stringify({\n      query: 'query{\\n  posts(\\n    pagination: {\\n      limit: 6,\\n      offset: 3\\n    }\\n  ){\\n    id, title, content, image, createdAt, comments {\\n      id, content\\n    }\\n  }\\n}',\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    await axios(config)\n      .then(function (response) {\n        commit('setPosts', response.data.data.posts)\n      })\n  },\n  async fetchLatestPosts ({ commit }) {\n    const data = JSON.stringify({\n      query: 'query{\\n  posts(\\n    pagination: {\\n      limit: 3,\\n      offset: 0\\n    }\\n  ){\\n    id, title, content, image, createdAt, comments {\\n      id, content\\n    }\\n  }\\n}',\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    await axios(config)\n      .then(function (response) {\n        commit('setLatestPosts', response.data.data.posts)\n      })\n  },\n  async fetchSinglePost ({ commit }, id) {\n    const data = JSON.stringify({\n      query: `query{\\n  post(\\n   id: ${id}\\n  ){\\n    id, title, content, image, createdAt, comments {\\n      id, content, createdAt\\n    }\\n  }\\n}`,\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    await axios(config)\n      .then(response => {\n        const postDetail = response.data.data.post\n        commit('singlePost', postDetail)\n      })\n  },\n  async fetchLoadMorePosts ({ commit }) {\n    const data = JSON.stringify({\n      query: 'query{\\n  posts(\\n    pagination: {\\n      limit: 6,\\n      offset: 6\\n    }\\n  ){\\n    id, title, content, image, createdAt, comments {\\n      id, content\\n    }\\n  }\\n}',\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    await axios(config)\n      .then(function (response) {\n        commit('setLoadMorePosts', response.data.data.posts)\n      })\n  },\n  // async fetchPostDetail ({ commit }, postId) {\n  //   const data = JSON.stringify({\n  //     query: `query{\\n  post(\\n   id: ${postId}\\n  ){\\n    id, title, content, image, createdAt, comments {\\n      id, content, createdAt\\n    }\\n  }\\n}`,\n  //     variables: {}\n  //   })\n  //   const config = {\n  //     method: 'post',\n  //     url: 'http://localhost:4000/',\n  //     headers: {\n  //       'Content-Type': 'application/json'\n  //     },\n  //     data: data\n  //   }\n  //   await axios(config)\n  //     .then(function (response) {\n  //       commit('setPostDetail', response.data.data.posts)\n  //     })\n  // },\n  loginUser ({ commit }, payload) {\n    return new Promise((resolve) => {\n      const data = JSON.stringify({\n        query: `mutation {\\n  authenticate(\\n    email: \"${payload.email}\",\\n    password: \"${payload.password}\"\\n  )\\n}`,\n        variables: {}\n      })\n      const config = {\n        method: 'post',\n        url: 'http://localhost:4000/',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: data\n      }\n      axios(config)\n        .then(function (response) {\n          console.log(JSON.stringify(response.data))\n          const key = response.data.data.authenticate\n          localStorage.setItem('authenticate', key)\n          commit('setAuthKey', key)\n          resolve(response)\n        })\n    })\n  },\n  logoutUser (context) {\n    if (context.getters.isLogined) {\n      const config = {\n        method: 'post',\n        url: 'http://localhost:4000/',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n      axios(config)\n        .then(function (response) {\n          localStorage.removeItem('authenticate')\n          context.commit('logOut')\n        })\n        .catch(function (error) {\n          localStorage.removeItem('authenticate')\n          context.commit('logOut')\n          console.log(error)\n        })\n    }\n  },\n  registerUser ({ commit }, payload) {\n    return new Promise((resolve, reject) => {\n      const data = JSON.stringify({\n        query: `mutation {\\n  register(\\n    email: \"${payload.email}\",\\n    password: \"${payload.password}\"\\n  )\\n}`,\n        variables: {}\n      })\n      const config = {\n        method: 'post',\n        url: 'http://localhost:4000/',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: data\n      }\n      axios(config)\n        .then(function (response) {\n          console.log(JSON.stringify(response.data))\n          resolve(response)\n        })\n        .catch(function (error) {\n          console.log(error)\n          reject(error)\n        })\n    })\n  },\n\n  async addPost ({ commit }, payload) {\n    const res = await axios.post('https://spa-blog-3da37.firebaseio.com/posts.json', { payload })\n\n    commit('newPost', res.data.payload)\n  }\n}\n\nconst mutations = {\n  setPosts: (state, postList) => (state.postList = postList),\n  setLatestPosts: (state, latestPosts) => (state.latestPosts = latestPosts),\n  singlePost: (state, singlePost) => (state.singlePost = singlePost),\n  setLoadMorePosts: (state, loadMorePosts) => (state.loadMorePosts = loadMorePosts),\n  setAuthKey: (state, authKey) => (state.authKey = authKey),\n  logOut: (state) => (state.authKey = null),\n  newPost: (state, payload) => {\n    const newPost = {\n      body: payload.content,\n      title: payload.title,\n      img: payload.img\n    }\n    state.postList.unshift(newPost)\n    console.log(state.postList.length)\n  }\n}\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n}\n"]}]}