{"remainingRequest":"/Users/rj/Trainings/Vue/spa_blog/blog/node_modules/babel-loader/lib/index.js!/Users/rj/Trainings/Vue/spa_blog/blog/node_modules/eslint-loader/index.js??ref--13-0!/Users/rj/Trainings/Vue/spa_blog/blog/src/store/modules/post.js","dependencies":[{"path":"/Users/rj/Trainings/Vue/spa_blog/blog/src/store/modules/post.js","mtime":1599120349018},{"path":"/Users/rj/Trainings/Vue/spa_blog/blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rj/Trainings/Vue/spa_blog/blog/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rj/Trainings/Vue/spa_blog/blog/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/rj/Trainings/Vue/spa_blog/blog/src/store/modules/post.js"],"names":["axios","state","postList","latestPosts","singlePost","totalPost","getters","allPosts","allLatestPosts","postDetail","getTotalPost","actions","fetchTotalPost","commit","data","JSON","stringify","query","variables","config","method","url","headers","then","response","posts","length","fetchPosts","postTotal","fetchLatestPosts","fetchSinglePost","id","post","addPost","context","payload","title","content","image","localStorage","getItem","value","console","log","catch","error","mutations","setTotalPost","setPosts","setLatestPosts","setLoadMorePosts","loadMorePosts","newPost","push"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nconst state = {\n  postList: [],\n  latestPosts: [],\n  singlePost: {},\n  totalPost: 0\n}\n\nconst getters = {\n  allPosts: (state) => state.postList,\n  allLatestPosts: (state) => state.latestPosts,\n  postDetail: (state) => state.singlePost,\n  getTotalPost: (state) => state.totalPost\n}\n\nconst actions = {\n  async fetchTotalPost ({ commit }) {\n    const data = JSON.stringify({\n      query: '{\\n  posts{\\n    id, title, content, createdAt,image , comments {\\n      id\\n    }\\n  }\\n}',\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    await axios(config)\n      .then(function (response) {\n        commit('setTotalPost', response.data.data.posts.length)\n      })\n  },\n  async fetchPosts ({ commit }, postTotal) {\n    const data = JSON.stringify({\n      query: `query{\\n  posts(\\n    pagination: {\\n      limit: ${postTotal},\\n      offset: 0\\n    }\\n  ){\\n    id, title, content, image, createdAt, comments {\\n      id, content\\n    }\\n  }\\n}`,\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    await axios(config)\n      .then(function (response) {\n        commit('setPosts', response.data.data.posts)\n      })\n  },\n  async fetchLatestPosts ({ commit }) {\n    const data = JSON.stringify({\n      query: 'query{\\n  posts(\\n    pagination: {\\n      limit: 3,\\n      offset: 0\\n    }\\n  ){\\n    id, title, content, image, createdAt, comments {\\n      id, content\\n    }\\n  }\\n}',\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    await axios(config)\n      .then(function (response) {\n        commit('setLatestPosts', response.data.data.posts)\n      })\n  },\n  async fetchSinglePost ({ commit }, id) {\n    const data = JSON.stringify({\n      query: `query{\\n  post(\\n   id: ${id}\\n  ){\\n    id, title, content, image, createdAt, comments {\\n      id, content, createdAt\\n    }\\n  }\\n}`,\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    await axios(config)\n      .then(response => {\n        const postDetail = response.data.data.post\n        commit('singlePost', postDetail)\n      })\n  },\n  async addPost (context, payload) {\n    const data = JSON.stringify({\n      query: `mutation {\\n  addPost(\\n post: {\\n title: \"${payload.title}\",\\n content: \"${payload.content}\",\\n image: \"${payload.image}\"\\n }\\n ) {\\n id, title, content\\n  }\\n}`,\n      variables: {}\n    })\n    const config = {\n      method: 'post',\n      url: 'http://localhost:4000/',\n      headers: {\n        'authenticate': localStorage.getItem('authenticate').value, // eslint-disable-line quote-props\n        'Content-Type': 'application/json'\n      },\n      data: data\n    }\n    axios(config)\n      .then(function (response) {\n        console.log(JSON.stringify(response.data))\n        context.commit('newPost', response.data.payload)\n      })\n      .catch(function (error) {\n        console.log(error)\n      })\n  }\n}\n\nconst mutations = {\n  setTotalPost: (state, totalPost) => (state.totalPost = totalPost),\n  setPosts: (state, postList) => (state.postList = postList),\n  setLatestPosts: (state, latestPosts) => (state.latestPosts = latestPosts),\n  singlePost: (state, singlePost) => (state.singlePost = singlePost),\n  setLoadMorePosts: (state, loadMorePosts) => (state.loadMorePosts = loadMorePosts),\n  newPost: (state, payload) => {\n    const newPost = {\n      title: payload.title,\n      content: payload.content,\n      image: payload.image\n    }\n    state.postList.push(newPost)\n    console.log(state.postList.length)\n  }\n}\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n}\n"]}]}