{"remainingRequest":"/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rj/Trainings/GoalSPA/spa_blog/src/components/Forms.vue?vue&type=template&id=5bafc8af&scoped=true&","dependencies":[{"path":"/Users/rj/Trainings/GoalSPA/spa_blog/src/components/Forms.vue","mtime":1599036428262},{"path":"/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rj/Trainings/GoalSPA/spa_blog/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}